#!/usr/bin/python3

import rospy
import cv2
import numpy as np
import tf2_ros

from os.path import dirname, join

from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA

from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from actionlib_msgs.msg import GoalStatusArray


STATUS_DICT = {
    0:"The goal has yet to be processed by the action server",
    1:"The goal is currently being processed by the action server",
    2:"The goal received a cancel request after it started executing and has since completed its execution (Terminal State)",
    3:"The goal was achieved successfully by the action server (Terminal State)",
    4:"The goal was aborted during execution by the action server due to some failure (Terminal State)",
    5:"The goal was rejected by the action server without being processed, because the goal was unattainable or invalid (Terminal State)",
    6:"The goal received a cancel request after it started executing and has not yet completed execution",
    7:"The goal received a cancel request before it started executing but the action server has not yet confirmed that the goal is canceled",
    8:"The goal received a cancel request before it started executing and was successfully cancelled (Terminal State)",
    9:"An action client can determine that a goal is LOST. This should not be sent over the wire by an action server",
}


def read_path_log(filename: str) -> list:
    """
    Reads copied published points and creates a path for the bot to follow.

    :param filename: The name of the file to read from.
    :return: A list of tuples containing the x, y, and z coordinates of the points.
    """
    path = []
    with open(filename, "r") as f:
        for line in f:
            if line.strip().startswith("x: "):
                x = float(line.strip().split(" ")[1])
                y = float(f.readline().strip().split(" ")[1])
                z = float(f.readline().strip().split(" ")[1])
                path.append((x, y, z))
    return path

class face_localizer:

    def __init__(self):
        rospy.init_node('face_localizer', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()
        
        # The function for performin HOG face detection
        #self.face_detector = dlib.get_frontal_face_detector()
        protoPath = join(dirname(__file__), "deploy.prototxt.txt")
        modelPath = join(dirname(__file__), "res10_300x300_ssd_iter_140000.caffemodel")

        self.face_net = cv2.dnn.readNetFromCaffe(protoPath, modelPath)

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for showing markers in Rviz
        self.marker_array = MarkerArray()
        self.marker_num = 1

        # Subscribe to the image and/or depth topic
        # self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
        # self.depth_sub = rospy.Subscriber("/camera/depth/image_raw", Image, self.depth_callback)

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('face_markers', MarkerArray, queue_size=1000)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)
        
        # Path that robot should traverse
        self.path = read_path_log("points_full_small")
    
        # Boolean marker to check if robot has reached all goals
        self.all_goals_reached = False
        
        if self.path:
            # Boolean marker to check if robot has a goal currently
            self.next_goal = True

        # Array containing face positions
        self.face_positions = []

        # Array of robot positions when faces are detected
        self.bot_positions = []

    def get_position(self, seq_id:int) -> PoseStamped: 
        """
        Creates a PoseStamped message with the next position in the path.

        :param seq_id: The sequence id of the message.
        :return: A PoseStamped message with the next position in the path.
        """
        msg = PoseStamped()
        msg.header.seq = seq_id
        msg.header.frame_id = "map"
        msg.pose.orientation.w = 1
        msg.pose.position.x = self.path[0][0]
        msg.pose.position.y = self.path[0][1]
        return msg

    def check_status(self, data: GoalStatusArray) -> None:
        """
        Subscriber (/move_base/status) callback function. Checks the status of the goal and reacts accordingly.

        :param data: The status of the goal.
        :return: None
        """
        status_list = data.status_list
        if len(status_list) == 0:
            self.next_goal = True
            return
        rospy.loginfo(f"status: {status_list[-1].status}: The goal is currently")
        rospy.loginfo(f"status {status_list[-1].status}: {STATUS_DICT[status_list[-1].status]}")
        rospy.loginfo(f"currently_on_path: {self.path}")
        if status_list[-1].status == 3:
            if not self.path:
                self.all_goals_reached = True
            message = "All goals reached." if not self.path else "Reached a goal."
            rospy.loginfo(message)
            self.next_goal = True
        elif status_list[-1].status not in (0, 1,):
            self.next_goal = True


    def marker_distance(self, pose: Pose) -> float:
        """
        Calculates the distance to the closest marker.
        
        WARNING: Will be depracted, once we recognize faces more intelligently.

        :param pose: The current position of the robot.
        :return: The distance to the closest marker.
        """
        
        min_dist = float("inf")
        for position in self.face_positions:
            dist = np.sqrt((pose.position.x - position[0])**2 + (pose.position.y - position[1])**2)
            if dist < min_dist:
                min_dist = dist

        if min_dist == float("inf") and self.face_positions:
            return 0

        return min_dist

    def get_pose(self,coords,dist,stamp):
        # Calculate the position of the detected face

        k_f = 554 # kinect focal length in pixels

        x1, x2, y1, y2 = coords

        face_x = self.dims[1] / 2 - (x1+x2)/2.
        face_y = self.dims[0] / 2 - (y1+y2)/2.

        angle_to_target = np.arctan2(face_x,k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)

        ### Define a stamped message for transformation - directly in "base_link"
        #point_s = PointStamped()
        #point_s.point.x = x
        #point_s.point.y = y
        #point_s.point.z = 0.3
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = rospy.Time(0)

        # Define a stamped message for transformation - in the "camera rgb frame"
        point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = 0
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = stamp

        # Get the point in the "map" coordinate system
        try:
            point_world = self.tf_buf.transform(point_s, "map")

            # Create a Pose object with the same position
            pose = Pose()
            pose.position.x = point_world.point.x
            pose.position.y = point_world.point.y
            pose.position.z = point_world.point.z
        except Exception as e:
            print(e)
            pose = None

        return pose
    
    def find_faces(self):
        # print('I got a new image!')

        # Get the next rgb and depth images that are posted from the camera
        try:
            rgb_image_message = rospy.wait_for_message("/camera/rgb/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        try:
            depth_image_message = rospy.wait_for_message("/camera/depth/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        # Convert the images into a OpenCV (numpy) format

        try:
            rgb_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
        except CvBridgeError as e:
            print(e)

        try:
            depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = rgb_image.shape
        h = self.dims[0]
        w = self.dims[1]

        # Tranform image to gayscale
        #gray = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        #img = cv2.equalizeHist(gray)

        # Detect the faces in the image
        #face_rectangles = self.face_detector(rgb_image, 0)
        blob = cv2.dnn.blobFromImage(cv2.resize(rgb_image, (300, 300)), 1.0, (300, 300), (104.0, 177.0, 123.0))
        self.face_net.setInput(blob)
        face_detections = self.face_net.forward()
        
        p = rospy.wait_for_message("/amcl_pose", PoseWithCovarianceStamped)
        p_position = p.pose.pose.position
        p_orientation = p.pose.pose.orientation
        
        for i in range(0, face_detections.shape[2]):
            confidence = face_detections[0, 0, i, 2]
            if confidence>0.75:
                box = face_detections[0,0,i,3:7] * np.array([w,h,w,h])
                box = box.astype('int')
                x1, y1, x2, y2 = box[0], box[1], box[2], box[3]

                # Extract region containing face
                face_region = rgb_image[y1:y2, x1:x2]

                # Visualize the extracted face
                #cv2.imshow("ImWindow", face_region)
                #cv2.waitKey(1)

                # Find the distance to the detected face
                face_distance = float(np.nanmean(depth_image[y1:y2,x1:x2]))

                # print('Distance to face', face_distance)

                # Get the time that the depth image was recieved
                depth_time = depth_image_message.header.stamp

                # Find the location of the detected face
                pose = self.get_pose((x1,x2,y1,y2), face_distance, depth_time)

                if pose is not None:
                    
                    # Create a marker used for visualization
                    self.marker_num += 1
                    marker = Marker()
                    marker.header.stamp = rospy.Time(0)
                    marker.header.frame_id = 'map'
                    marker.pose = pose
                    marker.type = Marker.CUBE
                    marker.action = Marker.ADD
                    marker.frame_locked = False
                    marker.lifetime = rospy.Duration.from_sec(10)
                    marker.id = self.marker_num
                    marker.scale = Vector3(0.1, 0.1, 0.1)
                    marker.color = ColorRGBA(0, 1, 0, 1)
                    d = self.marker_distance(pose)
                    message = "will add" if d > 1 else "will not add"
                    rospy.loginfo(f"Distance to new snapshot of a face is {d}, {message}.")
                    if d > 1:
                        self.bot_positions.append((p_position, p_orientation, face_distance))
                        with open("run_info/face_coordinates.txt", "a") as f:
                            f.write(f"face_{len(self.bot_positions)}: {p_position}\n")
                        cv2.imwrite(f'run_info/face_{len(self.bot_positions)}.jpg', face_region) # Save the face image
                        self.marker_array.markers.append(marker)
                        self.markers_pub.publish(self.marker_array)

    def depth_callback(self,data):

        try:
            depth_image = self.bridge.imgmsg_to_cv2(data, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Do the necessairy conversion so we can visuzalize it in OpenCV
        
        image_1 = depth_image / np.nanmax(depth_image)
        image_1 = image_1*255
        
        image_viz = np.array(image_1, dtype=np.uint8)

        #cv2.imshow("Depth window", image_viz)
        #cv2.waitKey(1)

        #plt.imshow(depth_image)
        #plt.show()

def main():
        face_finder = face_localizer()
        
        pub = rospy.Publisher("/move_base_simple/goal", PoseStamped, queue_size=10)
        sub = rospy.Subscriber("/move_base/status", GoalStatusArray, callback=face_finder.check_status)

        rate = rospy.Rate(10)
        
        seq_id = 1
        while not rospy.is_shutdown():
            face_finder.find_faces()

            if not face_finder.path and face_finder.all_goals_reached:
                rospy.loginfo(face_finder.bot_positions)
                msg = PoseStamped()
                msg.header.seq = seq_id
                msg.header.frame_id = "map"
                msg.pose.orientation = face_finder.bot_positions[0][1]
                msg.pose.position = face_finder.bot_positions[0][0]
                pub.publish(msg)
                break

            if face_finder.next_goal:
                rospy.loginfo(f"Next goal is: {face_finder.path[0]}")
                msg = face_finder.get_position(seq_id) 
                seq_id += 1
                pub.publish(msg)
                face_finder.path.pop(0)
                face_finder.next_goal = False
            else:
                # rospy.spin()
                pass


            rate.sleep()

        cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
