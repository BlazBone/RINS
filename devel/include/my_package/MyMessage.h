// Generated by gencpp from file my_package/MyMessage.msg
// DO NOT EDIT!


#ifndef MY_PACKAGE_MESSAGE_MYMESSAGE_H
#define MY_PACKAGE_MESSAGE_MYMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_package
{
template <class ContainerAllocator>
struct MyMessage_
{
  typedef MyMessage_<ContainerAllocator> Type;

  MyMessage_()
    : message()
    , id(0)  {
    }
  MyMessage_(const ContainerAllocator& _alloc)
    : message(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::my_package::MyMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_package::MyMessage_<ContainerAllocator> const> ConstPtr;

}; // struct MyMessage_

typedef ::my_package::MyMessage_<std::allocator<void> > MyMessage;

typedef boost::shared_ptr< ::my_package::MyMessage > MyMessagePtr;
typedef boost::shared_ptr< ::my_package::MyMessage const> MyMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_package::MyMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_package::MyMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_package::MyMessage_<ContainerAllocator1> & lhs, const ::my_package::MyMessage_<ContainerAllocator2> & rhs)
{
  return lhs.message == rhs.message &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_package::MyMessage_<ContainerAllocator1> & lhs, const ::my_package::MyMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_package::MyMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_package::MyMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::MyMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::MyMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::MyMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::MyMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_package::MyMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "693c355a78e66eabcabcc6b2654ed44e";
  }

  static const char* value(const ::my_package::MyMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x693c355a78e66eabULL;
  static const uint64_t static_value2 = 0xcabcc6b2654ed44eULL;
};

template<class ContainerAllocator>
struct DataType< ::my_package::MyMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_package/MyMessage";
  }

  static const char* value(const ::my_package::MyMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_package::MyMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string message\n"
"int32 id\n"
;
  }

  static const char* value(const ::my_package::MyMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_package::MyMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_package::MyMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_package::MyMessage_<ContainerAllocator>& v)
  {
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PACKAGE_MESSAGE_MYMESSAGE_H
